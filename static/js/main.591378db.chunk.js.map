{"version":3,"sources":["Component/Product.tsx","Features/ToggleSlice/SelectorToggle.ts","Features/ToggleSlice/ToggleSlice.ts","Component/Button.tsx","Features/SearchSlice/SearchSlice.ts","Effect/Ripple.tsx","Features/SearchSlice/SelectorSearch.ts","Component/Search.tsx","Component/NavBar.tsx","Component/Footer.tsx","Main/Plp.tsx","Component/CardPdp.tsx","Main/Pdp.tsx","App.tsx","reportWebVitals.js","Features/VariantsSlice/VariantsSlice.ts","Store/store.ts","index.tsx"],"names":["Card","styled","div","CardLink","Link","CardMedia","img","CardContent","Typography","h5","TypographyPrice","p","TypographyStock","Chip","span","Product","product","to","UPC","src","name","price","current","value","availability","stock","toggleSelector","state","toggle","ToggleSlice","createSlice","initialState","reducers","setToggle","action","payload","toggleActions","actions","Box","Button","button","ContainedButtons","useSelector","dispatch","useDispatch","className","activeButton","onClick","SearchSlice","setSearchQuery","searchActions","RippleContainer","props","color","duration","Ripple","useState","rippleArray","setRippleArray","rippleCount","cleanUpFunction","useLayoutEffect","bounce","clearTimeout","setTimeout","useDebouncedRippleCleanUp","length","onMouseDown","event","rippleContainer","currentTarget","getBoundingClientRect","size","width","height","newRipple","x","pageX","y","pageY","map","ripple","index","style","top","left","searchSelector","search","Grid","TextField","input","Label","label","SearchBarWrapper","ButtonReset","colorBg","Search","searchQuery","onChange","e","target","NavBar","display","alt","a","Footer","href","rel","GridProduct","Plp","products","filter","prod","toLowerCase","includes","Container","ContainerTitle","TypographyTitle","ContainerMedia","ContainerText","TypographyName","ButtonAddCart","ContainerColor","TypographyColors","GridImage","CardPdp","variant","setVariant","useEffect","variants","Pdp","useParams","productFind","find","prodotto","App","setProducts","fetch","then","res","json","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","VariantsSlice","store","configureStore","reducer","searchReducer","toggleReducer","variantsReducer","ReactDOM","render","StrictMode","basename","document","getElementById"],"mappings":"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","file":"static/js/main.591378db.chunk.js","sourcesContent":["import * as React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\nimport { Products } from \"../Data/Data\";\r\n\r\nconst Card = styled.div`\r\n  background-color: rgb(255, 255, 255);\r\n  color: rgba(0, 0, 0, 0.87);\r\n  border-radius: 4px;\r\n  box-shadow: rgb(0 0 0 / 20%) 0px 2px 1px -1px,\r\n    rgb(0 0 0 / 14%) 0px 1px 1px 0px, rgb(0 0 0 / 12%) 0px 1px 3px 0px;\r\n  font-family: Roboto, Helvetica, Arial, sans-serif;\r\n`;\r\n\r\nconst CardLink = styled(Link)`\r\n  text-decoration: none;\r\n  color: black;\r\n`;\r\n\r\nconst CardMedia = styled.img`\r\n  width: 100%;\r\n  border-top-right-radius: 4px;\r\n  border-top-left-radius: 4px;\r\n`;\r\n\r\nconst CardContent = styled.div`\r\n  padding-left: 16px;\r\n  margin-top: 0px;\r\n`;\r\n\r\nconst Typography = styled.h5`\r\n  margin: 0px;\r\n  padding-top: 12px;\r\n  font-weight: 400;\r\n  font-size: 1.5rem;\r\n  line-height: 1.334;\r\n  letter-spacing: 0em;\r\n`;\r\n\r\nconst TypographyPrice = styled.p`\r\n  margin: 0px 0px 12px;\r\n  font-weight: 400;\r\n  font-size: 1rem;\r\n  line-height: 1.5;\r\n  letter-spacing: 0.00938em;\r\n  color: rgba(0, 0, 0, 0.6);\r\n`;\r\n\r\nconst TypographyStock = styled.p`\r\n  margin: 0px 0px 24px;\r\n`;\r\n\r\nconst Chip = styled.span`\r\n  font-size: 0.8125rem;\r\n  padding: 12px;\r\n  display: inline-flex;\r\n  align-items: center;\r\n  height: 32px;\r\n  color: rgba(0, 0, 0, 0.87);\r\n  background-color: rgba(0, 0, 0, 0.08);\r\n  border-radius: 16px;\r\n  letter-spacing: 0.1px;\r\n  cursor: default;\r\n  outline: 0px;\r\n  text-decoration: none;\r\n  border: 0px;\r\n  vertical-align: middle;\r\n  box-sizing: border-box;\r\n`;\r\n\r\ntype Props = {\r\n  product: Products;\r\n};\r\n\r\nconst Product: React.FC<Props> = ({ product }) => {\r\n  return (\r\n    <Card key={product.UPC}>\r\n      <CardLink to={`/product/${product.UPC}`}>\r\n        <CardMedia src=\"https://via.placeholder.com/350\" />\r\n        <CardContent>\r\n          <Typography>{product.name}</Typography>\r\n          <TypographyPrice>$ {product.price.current.value}</TypographyPrice>\r\n          <TypographyStock>\r\n            {product.availability.stock > 0 ? (\r\n              <Chip> in stock </Chip>\r\n            ) : (\r\n              <Chip> out of stock </Chip>\r\n            )}\r\n          </TypographyStock>\r\n        </CardContent>\r\n      </CardLink>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default Product;\r\n","import { RootState } from \"../../Store/store\";\r\n\r\nexport const toggleSelector = (state: RootState) => state.toggle.value","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\n\r\nexport interface ToggleState {\r\n  value: \"none\" | \"in\" | \"out\";\r\n}\r\n\r\nconst initialState: ToggleState = {\r\n  value: \"none\",\r\n};\r\n\r\nexport const ToggleSlice = createSlice({\r\n  name: \"toggle\",\r\n  initialState,\r\n  reducers: {\r\n    setToggle: (state, action: PayloadAction<\"none\" | \"in\" | \"out\">) => {\r\n      state.value = action.payload;\r\n    },\r\n  },\r\n});\r\n\r\n// Action creators are generated for each case reducer function\r\nexport const toggleActions = ToggleSlice.actions;\r\n\r\nexport default ToggleSlice.reducer;\r\n","import * as React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport styled from \"styled-components\";\r\nimport { toggleSelector } from \"../Features/ToggleSlice/SelectorToggle\";\r\nimport { toggleActions } from \"../Features/ToggleSlice/ToggleSlice\";\r\n\r\nconst Box = styled.div`\r\n  margin-top: 22px;\r\n  @media (min-width: 1280px) {\r\n    margin-left: 82px;\r\n  }\r\n  @media (min-width: 768px) {\r\n    margin-right: -20px;\r\n  }\r\n  @media (max-width: 540px) {\r\n    margin-left: 10px;\r\n    margin-right: 50px;\r\n  }\r\n  @media (max-width: 414px) {\r\n    margin-right: 50px;\r\n  }\r\n  @media (max-width: 280px) {\r\n    margin-right: 0px;\r\n  }\r\n`;\r\n\r\nconst Button = styled.button<BgButton>`\r\n  background-color: transparent;\r\n  color: #1976d2;\r\n  height: 36px;\r\n  min-width: 64px;\r\n  padding: 5px 15px;\r\n  cursor: pointer;\r\n  border: 1px solid rgba(25, 118, 210, 0.5);\r\n  font-weight: 500;\r\n  font-size: 0.875rem;\r\n  line-height: 1.75;\r\n  letter-spacing: 0.02857em;\r\n  box-shadow: 0px 1.5px #888888;\r\n  vertical-align: middle;\r\n  transition: 250ms;\r\n  &.in {\r\n    border-radius: 5px 0 0 5px;\r\n  }\r\n  &.out {\r\n    border-radius: 0 5px 5px 0;\r\n  }\r\n  &:hover {\r\n    background-color: rgba(25, 118, 210, 0.04);\r\n    color: #1976d2;\r\n    border: 1px solid rgb(25, 118, 210);\r\n  }\r\n  &.selected {\r\n    background-color: #1976d2;\r\n    color: #fff;\r\n  }\r\n  &.selected:hover {\r\n    background-color: #155697;\r\n  }\r\n`;\r\n\r\ntype BgButton = {\r\n  activeButton: boolean;\r\n};\r\n\r\nconst ContainedButtons: React.FC = () => {\r\n  const toggle = useSelector(toggleSelector);\r\n  const dispatch = useDispatch();\r\n  return (\r\n    <Box>\r\n      <Button\r\n        className={toggle === \"in\" ? \"in selected\" : \"in\"}\r\n        activeButton={toggle === \"in\"}\r\n        onClick={() =>\r\n          dispatch(\r\n            toggle === \"in\"\r\n              ? toggleActions.setToggle(\"none\")\r\n              : toggleActions.setToggle(\"in\")\r\n          )\r\n        }\r\n      >\r\n        IN STOCK\r\n      </Button>\r\n      <Button\r\n        className={toggle === \"out\" ? \"out selected\" : \"out\"}\r\n        activeButton={toggle === \"out\"}\r\n        onClick={() =>\r\n          dispatch(\r\n            toggle === \"out\"\r\n              ? toggleActions.setToggle(\"none\")\r\n              : toggleActions.setToggle(\"out\")\r\n          )\r\n        }\r\n      >\r\n        OUT OF STOCK\r\n      </Button>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default ContainedButtons;\r\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\n\r\nexport interface SearchState {\r\n  value: string;\r\n}\r\n\r\nconst initialState: SearchState = {\r\n  value: \"\",\r\n};\r\n\r\nexport const SearchSlice = createSlice({\r\n  name: \"search\",\r\n  initialState,\r\n  reducers: {\r\n    setSearchQuery: (state, action: PayloadAction<string>) => {\r\n      state.value = action.payload;\r\n    },\r\n  },\r\n});\r\n\r\n// Action creators are generated for each case reducer function\r\nexport const searchActions = SearchSlice.actions;\r\n\r\nexport default SearchSlice.reducer;\r\n","import React, { MouseEvent, useState, useLayoutEffect } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\ntype Props = {\r\n  color: string;\r\n  duration: number;\r\n};\r\n\r\nconst RippleContainer = styled.div<Props>`\r\n  position: absolute;\r\n  top: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  left: 0;\r\n\r\n  span {\r\n    transform: scale(0);\r\n    border-radius: 100%;\r\n    position: absolute;\r\n    opacity: 0.75;\r\n    background-color: ${(props) => props.color};\r\n    animation-name: ripple;\r\n    animation-duration: ${(props) => props.duration}ms;\r\n  }\r\n\r\n  @keyframes ripple {\r\n    to {\r\n      opacity: 0;\r\n      transform: scale(2);\r\n    }\r\n  }\r\n`;\r\n\r\nconst useDebouncedRippleCleanUp = (\r\n  rippleCount: number,\r\n  duration: number,\r\n  cleanUpFunction: () => void\r\n) => {\r\n  useLayoutEffect(() => {\r\n    let bounce: null | NodeJS.Timeout = null;\r\n    if (rippleCount > 0) {\r\n      bounce && clearTimeout(bounce);\r\n\r\n      bounce = setTimeout(() => {\r\n        cleanUpFunction();\r\n        bounce && clearTimeout(bounce);\r\n      }, duration * 4);\r\n    }\r\n\r\n    return () => {\r\n      bounce && clearTimeout(bounce);\r\n    };\r\n  }, [rippleCount, duration, cleanUpFunction]);\r\n};\r\n\r\nconst Ripple = ({ duration = 850, color = \"rgba(255,255,255,0.4)\" }) => {\r\n  const [rippleArray, setRippleArray] = useState<\r\n    { x: number; y: number; size: number }[]\r\n  >([]);\r\n\r\n  useDebouncedRippleCleanUp(rippleArray.length, duration, () => {\r\n    setRippleArray([]);\r\n  });\r\n\r\n  const addRipple = (event: MouseEvent) => {\r\n    const rippleContainer = event.currentTarget.getBoundingClientRect();\r\n    const size =\r\n      rippleContainer.width > rippleContainer.height\r\n        ? rippleContainer.width\r\n        : rippleContainer.height;\r\n    const x = event.pageX - rippleContainer.x - size / 2;\r\n    const y = event.pageY - rippleContainer.y - size / 2;\r\n    const newRipple = {\r\n      x,\r\n      y,\r\n      size,\r\n    };\r\n\r\n    setRippleArray([...rippleArray, newRipple]);\r\n  };\r\n\r\n  return (\r\n    <RippleContainer duration={duration} color={color} onMouseDown={addRipple}>\r\n      {rippleArray.length > 0 &&\r\n        rippleArray.map((ripple, index) => {\r\n          return (\r\n            <span\r\n              key={\"span\" + index}\r\n              style={{\r\n                top: ripple.y,\r\n                left: ripple.x,\r\n                width: ripple.size,\r\n                height: ripple.size,\r\n              }}\r\n            />\r\n          );\r\n        })}\r\n    </RippleContainer>\r\n  );\r\n};\r\n\r\nexport default Ripple;\r\n","import { RootState } from \"../../Store/store\";\r\n\r\nexport const searchSelector = (state: RootState) => state.search.value;\r\n","import * as React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport styled from \"styled-components\";\r\nimport { searchActions } from \"../Features/SearchSlice/SearchSlice\";\r\nimport Ripple from \"../Effect/Ripple\";\r\nimport { searchSelector } from \"../Features/SearchSlice/SelectorSearch\";\r\n\r\nconst Grid = styled.div`\r\n  margin-right: 1px;\r\n  @media (min-width: 1280px) {\r\n    margin-right: 117px;\r\n  }\r\n`;\r\n\r\nconst TextField = styled.input`\r\n  font-size: 1.063rem;\r\n  padding: 10px;\r\n  padding-left: 19px;\r\n  height: 34px;\r\n  margin-right: 16px;\r\n  border: 1px solid rgb(100, 100, 100, 0.5);\r\n  border-radius: 3px;\r\n  &:focus {\r\n    outline: none;\r\n    border: 2px solid #1976d2;\r\n  }\r\n  @media (min-width: 1280px) {\r\n    width: 380px;\r\n  }\r\n  @media (max-width: 540px) {\r\n    width: 380px;\r\n  }\r\n  @media (max-width: 414px) {\r\n    width: 200px;\r\n  }\r\n  @media (max-width: 320px) {\r\n    width: 100px;\r\n  }\r\n`;\r\n\r\nconst Label = styled.label`\r\n  color: gray;\r\n  font-size: 1.063rem;\r\n  letter-spacing: inherit;\r\n  font-weight: normal;\r\n  position: absolute;\r\n  pointer-events: none;\r\n  left: 14px;\r\n  top: 15px;\r\n  transition: 0.2s ease all;\r\n  ${TextField}:focus ~ & {\r\n    top: -10px;\r\n    font-size: 0.813rem;\r\n    color: #1976d2;\r\n    background-color: white;\r\n    width: 40px;\r\n    padding-left: 5px;\r\n  }\r\n  &.up {\r\n    top: -10px;\r\n    font-size: 0.813rem;\r\n    color: #1976d2;\r\n    background-color: white;\r\n    width: 40px;\r\n    padding-left: 5px;\r\n  }\r\n`;\r\nconst SearchBarWrapper = styled.div`\r\n  position: relative;\r\n  margin-top: 8px;\r\n  margin-left: 10px;\r\n  display: flex;\r\n`;\r\n\r\nconst ButtonReset = styled.button<AnimationButton>`\r\n  position: relative;\r\n  height: 36px;\r\n  margin-top: 10px;\r\n  overflow: hidden;\r\n  cursor: pointer;\r\n  background: ${(props) => (props.colorBg ? \"#1976d2\" : \"white\")};\r\n  color: ${(props) => (props.colorBg ? \"white\" : \"#1976d2\")};\r\n  transition: background 0.5s;\r\n  font-weight: 500;\r\n  font-size: 0.875rem;\r\n  line-height: 1.75;\r\n  letter-spacing: 0.02857em;\r\n  text-transform: uppercase;\r\n  min-width: 64px;\r\n  padding: 6px 15.5px;\r\n  border-radius: 4px;\r\n  border: none;\r\n  box-shadow: rgb(0 0 0 / 20%) 0px 3px 1px -2px,\r\n    rgb(0 0 0 / 14%) 0px 2px 2px 0px, rgb(0 0 0 / 12%) 0px 1px 5px 0px;\r\n  transition: 0.8s;\r\n  &:active {\r\n    background-color: #1976d2;\r\n    opacity: 0.7;\r\n    transition: 2s;\r\n    box-shadow: 5px 5px 20px 0px #000000;\r\n  }\r\n  &:hover {\r\n    background-color: #155697;\r\n  }\r\n`;\r\n\r\ntype AnimationButton = {\r\n  colorBg: boolean;\r\n};\r\n\r\nconst Search: React.FC = () => {\r\n  const searchQuery = useSelector(searchSelector);\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <Grid>\r\n      <SearchBarWrapper>\r\n        <TextField\r\n          onChange={(e) => dispatch(searchActions.setSearchQuery(e.target.value))}\r\n          value={searchQuery}\r\n        />\r\n        <Label className={searchQuery === \"\" ? \"\" : \"up\"}>search</Label>\r\n        <ButtonReset\r\n          colorBg\r\n          onClick={() => {\r\n            dispatch(searchActions.setSearchQuery(\"\"));\r\n          }}\r\n        >\r\n          RESET\r\n          <Ripple />\r\n        </ButtonReset>\r\n      </SearchBarWrapper>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default Search;\r\n","import * as React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport ContainedButtons from \"./Button\";\r\nimport Search from \"../Component/Search\";\r\n\r\nconst Grid = styled.div`\r\n  border-bottom: 1px solid black;\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  justify-content: space-between;\r\n`;\r\n\r\nconst NavBar: React.FC = () => {\r\n  return (\r\n    <Grid>\r\n      <img\r\n        style={{ display: \"block\" }}\r\n        src=\"https://via.placeholder.com/150x80\"\r\n        alt=\"logo\"\r\n      />\r\n      <ContainedButtons />\r\n      <Search />\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default NavBar;\r\n","import * as React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Box = styled.div`\r\n  background-color: #bdbdbd;\r\n  text-align: right;\r\n  padding: 16px;\r\n  position: absolute;\r\n  bottom: 0;\r\n  width: 100%;\r\n  box-sizing: border-box;\r\n  font-family: Roboto, Helvetica, Arial, sans-serif;\r\n`;\r\n\r\nconst Button = styled.a`\r\n  display: inline-flex;\r\n  background-color: transparent;\r\n  cursor: pointer;\r\n  text-decoration: none;\r\n  font-size: 0.875rem;\r\n  line-height: 1.75;\r\n  letter-spacing: 0.02857em;\r\n  text-transform: uppercase;\r\n  min-width: 64px;\r\n  padding: 6px 8px;\r\n  color: rgb(25, 118, 210);\r\n  border: 0px;\r\n  vertical-align: middle;\r\n  &.border {\r\n    border-right: 1px solid rgb(25, 118, 210);\r\n  }\r\n`;\r\n\r\nconst Footer: React.FC = () => {\r\n  return (\r\n    <Box>\r\n      <a href=\"https://www.facebook.com\" target=\"_blank\" rel=\"noreferrer\">\r\n        <Button className=\"border\">TWITTER</Button>\r\n      </a>\r\n      <a href=\"https://www.twitter.com\" target=\"_blank\" rel=\"noreferrer\">\r\n        <Button>FACEBOOK</Button>\r\n      </a>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","import * as React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport Product from \"../Component/Product\";\r\nimport NavBar from \"../Component/NavBar\";\r\nimport { Products } from \"../Data/Data\";\r\nimport Footer from \"../Component/Footer\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { searchSelector } from \"../Features/SearchSlice/SelectorSearch\";\r\nimport { toggleSelector } from \"../Features/ToggleSlice/SelectorToggle\";\r\n\r\nconst Grid = styled.div`\r\n  min-height: 100vh;\r\n  position: relative;\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nconst GridProduct = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 24.15% 24.15% 24.15% 24.15%;\r\n  @media (max-width: 1280px) {\r\n    grid-template-columns: 24% 24% 24% 24%;\r\n  }\r\n  @media (max-width: 1024px) {\r\n    grid-template-columns: 45% 45%;\r\n  }\r\n  @media (max-width: 414px) {\r\n    grid-template-columns: 98%;\r\n  }\r\n  padding-top: 16px;\r\n  padding-left: 16px;\r\n  padding-bottom: 84px;\r\n  @media (max-width: 1280px) {\r\n    padding-left: 5px;\r\n  }\r\n  @media (max-width: 1024px) {\r\n    padding-left: 55px;\r\n  }\r\n  @media (max-width: 768px) {\r\n    padding-left: 40px;\r\n  }\r\n  @media (max-width: 540px) {\r\n    padding-left: 25px;\r\n  }\r\n  @media (max-width: 414px) {\r\n    padding-left: 7px;\r\n  }\r\n  gap: 16px;\r\n`;\r\n\r\ntype Props = {\r\n  products: Products[];\r\n};\r\n\r\nconst Plp: React.FC<Props> = ({ products }) => {\r\n  const searchQuery = useSelector(searchSelector);\r\n  const toggle = useSelector(toggleSelector);\r\n\r\n  return (\r\n    <Grid>\r\n      <NavBar />\r\n      <GridProduct>\r\n        {products\r\n          ?.filter((prod) => {\r\n            switch (toggle) {\r\n              case \"in\":\r\n                return prod.availability.stock > 0;\r\n              case \"out\":\r\n                return prod.availability.stock <= 0;\r\n              default:\r\n                return true;\r\n            }\r\n          })\r\n          .filter((prod) => {\r\n            return prod.name.toLowerCase().includes(searchQuery.toLowerCase());\r\n          })\r\n          .map((product) => (\r\n            <Product product={product} key={product.UPC} />\r\n          ))}\r\n      </GridProduct>\r\n      <Footer />\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default Plp;","import * as React from \"react\";\r\nimport { useEffect, useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { Products } from \"../Data/Data\";\r\nimport Footer from \"./Footer\";\r\nimport NavBar from \"./NavBar\";\r\n\r\nconst Grid = styled.div`\r\n  min-height: 100vh;\r\n  position: relative;\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nconst Container = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 1fr 1fr;\r\n  grid-template-rows: auto;\r\n  gap: 10px;\r\n  column-gap: 20px;\r\n  margin-left: 2.5%;\r\n  margin-right: 2.5%;\r\n  margin-top: 20px;\r\n`;\r\n\r\nconst ContainerTitle = styled.div`\r\n  grid-column: 1/4;\r\n  @media (max-width: 540px) {\r\n    text-align: center;\r\n  }\r\n`;\r\n\r\nconst TypographyTitle = styled.h5`\r\n  margin: 0px;\r\n  font-size: 2.5rem;\r\n  font-weight: bold;\r\n`;\r\n\r\nconst Typography = styled.h5`\r\n  margin: 0px;\r\n  font-size: 2.188rem;\r\n  font-weight: bold;\r\n`;\r\n\r\nconst ContainerMedia = styled.div`\r\n  grid-column: 1/2;\r\n  @media (max-width: 540px) {\r\n    grid-column: 1/4;\r\n    text-align: center;\r\n  }\r\n`;\r\n\r\nconst CardMedia = styled.img`\r\n  @media (max-width: 540px) {\r\n    height: 350px;\r\n    width: 450px;\r\n  }\r\n`;\r\n\r\nconst ContainerText = styled.div`\r\n  margin-right: 100px;\r\n  @media (max-width: 540px) {\r\n    margin-right: 0px;\r\n  }\r\n`;\r\n\r\nconst TypographyPrice = styled.p`\r\n  font-size: 1.875rem;\r\n  font-weight: bold;\r\n  margin-top: 0;\r\n`;\r\n\r\nconst TypographyName = styled.p`\r\n  font-size: 1.375rem;\r\n  font-weight: bold;\r\n  margin: 0;\r\n  & span {\r\n    color: grey;\r\n  }\r\n`;\r\n\r\nconst ButtonAddCart = styled.button`\r\n  background-color: transparent;\r\n  border: 1px solid grey;\r\n  border-radius: 16px;\r\n  padding-top: 10px;\r\n  padding-bottom: 10px;\r\n  padding-left: 45px;\r\n  padding-right: 45px;\r\n  font-size: 1.375rem;\r\n  font-weight: bold;\r\n  margin-top: 25px;\r\n  @media (max-width: 540px) {\r\n    position: relative;\r\n    left: 300px;\r\n    bottom: 75px;\r\n  }\r\n`;\r\n\r\nconst ContainerColor = styled.div`\r\n  grid-column: 1/4;\r\n  @media (max-width: 540px) {\r\n    position: relative;\r\n    bottom: 65px;\r\n  }\r\n`;\r\n\r\nconst TypographyColors = styled.h5`\r\n  margin: 0;\r\n  font-size: 1.375rem;\r\n  font-weight: bold;\r\n  margin-bottom: 20px;\r\n`;\r\n\r\nconst GridImage = styled.div`\r\n  overflow: auto;\r\n  white-space: nowrap;\r\n  &::-webkit-scrollbar {\r\n    display: none;\r\n  }\r\n  & img {\r\n    cursor: pointer;\r\n    height: 150px;\r\n    width: 200px;\r\n    margin-right: 25px;\r\n  }\r\n  margin-bottom: 100px;\r\n  @media (max-width: 540px) {\r\n    margin-bottom: 25px;\r\n    & img {\r\n      height: 100px;\r\n      width: 150px;\r\n      margin-right: 20px;\r\n    }\r\n  }\r\n`;\r\n\r\ntype Props = {\r\n  product: Products;\r\n};\r\n\r\nconst CardPdp: React.FC<Props> = ({ product }) => {\r\n  const [variant, setVariant] = useState<\r\n    Products | Omit<Products, \"variants\"> | undefined\r\n  >();\r\n  useEffect(() => setVariant(product), [product]);\r\n  return (\r\n    <Grid>\r\n      <>\r\n        <NavBar />\r\n        <Container>\r\n          {variant ? (\r\n            <>\r\n              <ContainerTitle>\r\n                <TypographyTitle>{variant.name}</TypographyTitle>\r\n              </ContainerTitle>\r\n              <ContainerMedia>\r\n                <CardMedia\r\n                  src={`https://picsum.photos/1000/600?random=${variant.UPC}`}\r\n                />\r\n              </ContainerMedia>\r\n              <ContainerText>\r\n                <Typography>{variant.name}</Typography>\r\n                <TypographyPrice>\r\n                  {variant.price.current.value} USD\r\n                </TypographyPrice>\r\n                <TypographyName>\r\n                  <span>Name:</span> {variant.name}\r\n                </TypographyName>\r\n                <TypographyName>\r\n                  <span>Lens color:</span> Green\r\n                </TypographyName>\r\n                <TypographyName>\r\n                  <span>Size:</span> Standard\r\n                </TypographyName>\r\n                <TypographyName>\r\n                  <span>UPC:</span> {variant.UPC}\r\n                </TypographyName>\r\n                <ButtonAddCart>Add to cart</ButtonAddCart>\r\n              </ContainerText>\r\n              <ContainerColor>\r\n                <TypographyColors>Available colors:</TypographyColors>\r\n                <GridImage>\r\n                  <img\r\n                    alt={`Product${product.UPC}`}\r\n                    src={`https://picsum.photos/1000/600?random=${product.UPC}`}\r\n                    onClick={() => setVariant(product)}\r\n                  />\r\n                  {product.variants.map((prod) => (\r\n                    <img\r\n                      key={prod.UPC}\r\n                      alt={`Product${prod.UPC}`}\r\n                      src={`https://picsum.photos/1000/600?random=${prod.UPC}`}\r\n                      onClick={() => setVariant(prod)}\r\n                    />\r\n                  ))}\r\n\r\n                </GridImage>\r\n              </ContainerColor>\r\n            </>\r\n          ) : null}\r\n        </Container>\r\n      </>\r\n      <Footer />\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default CardPdp;\r\n","import React from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport CardPdp from \"../Component/CardPdp\";\r\nimport { Products } from \"../Data/Data\";\r\n\r\ntype Props = {\r\n  products: Products[];\r\n};\r\n\r\nconst Pdp: React.FC<Props> = ({ products }) => {\r\n  const { UPC } = useParams<{ UPC: string }>();\r\n  const productFind = products.find((prodotto) => prodotto.UPC === UPC);\r\n  return productFind ? <CardPdp product={productFind} /> : null;\r\n};\r\n\r\nexport default Pdp;\r\n","import \"./App.css\";\nimport { Route, Switch } from \"react-router-dom\";\nimport Plp from \"./Main/Plp\";\nimport Pdp from \"./Main/Pdp\";\nimport { Products } from \"./Data/Data\";\nimport React, { useEffect, useState } from \"react\";\n\nconst App: React.FC = () => {\n  const [products, setProducts] = useState<Products[]>([]);\n\n  useEffect(() => {\n    fetch(\n      \"https://assets.fc-dev.instore.oakley.com/assets/products/products.json\"\n    )\n      .then((res) => res.json())\n      .then((products) => setProducts(products));\n  }, []);\n  return (\n    <Switch>\n      <Route path=\"/product/:UPC\">\n        <Pdp products={products} />\n      </Route>\n      <Route path=\"/\">\n        <Plp products={products} />\n      </Route>\n    </Switch>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\n\r\nexport interface VariantsState {\r\n  value: any;\r\n}\r\n\r\nconst initialState: VariantsState = {\r\n  value: 0,\r\n};\r\n\r\nexport const VariantsSlice = createSlice({\r\n  name: \"variants\",\r\n  initialState,\r\n  reducers: {\r\n    setVariant: (state, action: PayloadAction<any>) => {\r\n      state.value = action.payload;\r\n    },\r\n  },\r\n});\r\n\r\n// Action creators are generated for each case reducer function\r\nexport const variantsActions = VariantsSlice.actions;\r\n\r\nexport default VariantsSlice.reducer;\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport searchReducer from \"../Features/SearchSlice/SearchSlice\";\r\nimport toggleReducer from \"../Features/ToggleSlice/ToggleSlice\";\r\nimport variantsReducer from \"../Features/VariantsSlice/VariantsSlice\";\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    search: searchReducer,\r\n    toggle: toggleReducer,\r\n    variants: variantsReducer,\r\n  },\r\n});\r\n\r\n// Infer the `RootState` and `AppDispatch` types from the store itself\r\nexport type RootState = ReturnType<typeof store.getState>;\r\n// Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}\r\nexport type AppDispatch = typeof store.dispatch;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { store } from \"./Store/store\";\nimport { Provider } from \"react-redux\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <BrowserRouter basename=\"/ecommerce\">\n        <App />\n      </BrowserRouter>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}